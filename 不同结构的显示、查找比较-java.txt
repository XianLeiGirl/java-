String结构的类：
package my;
import java.util.Random;
public class Strings
{
	Random random=new Random();
//	字符串长度
//  public int n;
	public int sum;
//	显示
	public void DisplayString(int n)
	{
		//	字符串填充内容
		String[] string=new String[n];
		for(int i=0;i<string.length;i++)
		{
			int result=random.nextInt(n*1000);
			string[i]=String.valueOf(result);
		}
		for(int i=0;i<string.length;i++)
		{
			System.out.println(string[i]);
		}
	}

//查找
	public void SearchString(int n)
	{
		String[] string=new String[n];
		for(int i=0;i<string.length;i++)
		{
			int result=random.nextInt(n);
			string[i]=String.valueOf(result);
		}
		//equals获取字符串的内容	
		for(int i=0;i<string.length-1;i++){			
			for(int j=string.length-1;j>i;j--)
			{			
				if(string[i].equals(string[j]))
				{					
					sum=sum+1;
					break;
				}
			}
			}
		System.out.println("重复的字符串数为"+sum);
		}
	}
List结构的类：
package my;
//import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Iterator;
public class Lists
{
	Random random=new Random();
	public void DisplayList(int n)
	{
//		列表填充内容
		List<String> list=new ArrayList<>(n);
		for(int i=0;i<n;i++)
		{
			int result=random.nextInt(n*1000);
			String string=String.valueOf(result);
			list.add(string);
		}
//		遍历显示（迭代器）
		Iterator<String> it=list.iterator();
	    while(it.hasNext())
		{
	    	System.out.println(it.next());
	    }		
	}
	
	public void SearchList(int n)
	{
		int sum=0;
//		列表填充内容
		List<String> list=new ArrayList<>(n);
		for(int i=0;i<n;i++)
		{
			int result=random.nextInt(n);
			String string=String.valueOf(result);
			list.add(string);
		}
//			查找
		String ss="";
		for (int i = 0; i < n-1; i++)//若有超过两个以上相同值的字符串？如：9 5 4 9 6 0 4 8 2 9此方法造成重复数增多。
		{
            for (int j = n-1; j > i; j--) {
                if ((list.get(j)).equals(list.get(i))) 
                {
                	sum=sum+1;
		break;	
                    
                }
            }
        }
		System.out.println("重复的字符串数为"+sum);
	 }	
	}
Set结构的类：
package my;
import java.util.Random;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
public class Sets
{
	Random random=new Random();
	public void DisplaySet(int n)
	{
		//		列表填充内容
		Set set=new HashSet();
		for(int i=0;i<n;i++)
		{
			int result=random.nextInt(n);
			String string=String.valueOf(result);
			set.add(string);
	    }
//		显示
		Iterator<String> it=set.iterator();
	    while(it.hasNext())
		{
	    	System.out.println(it.next());//
	    }	
//	    System.out.println("集合大小为"+set.size());
	}
	public void SearchSet(int n)
	{
//		列表填充内容
		Set set=new HashSet();
		for(int i=0;i<n;i++)
		{
			int result=random.nextInt(n);
			String string=String.valueOf(result);
			set.add(string);
	    }
//		查找
//		 boolean isExists=false;
//		 Iterator<String> it=set.iterator();
//		 while(it.hasNext())   
//		 {
//			 //String newStr=it;//
//			 String oldStr=it.next();
//			 if(newStr.equals(oldStr))
//			 {
//				 isExists=true;	 	    
//		     }	
//	     }
		boolean isExists=false;
//		Iterator<String> it=set.iterator();
	    
	    	if(set.contains(String.valueOf(n/2)))
	    	{
	    		System.out.println("存在该值");
	    		isExists=true;
	    		return;
	    	}    	
	    
	    if(isExists==false)
    	{
    		System.out.println("不存在该值");	
    		return;
    	}
}
}
HashSet结构的类：
package my;
import java.util.Random;
import java.util.HashSet;
public class HashSets
{
	HashSet<String> hashset = new HashSet<String>();
	Random random=new Random();
	public void DisplayHashSet(int n)
	{
//		填充内容
		for(int i=0;i<n;i++)
		{
			int result=random.nextInt(n*1000);
			String string=String.valueOf(result);
			hashset.add(string);
	    }
		
//		显示
		System.out.println(hashset);
	}
	public void SearchHashSet(int n)
	{
		for(int i=0;i<n;i++)
		{
			int result=random.nextInt(n);
			String string=String.valueOf(result);
			hashset.add(string);
	    }
		if(hashset.contains(String.valueOf(n/2)))
		{
			System.out.println("存在该值");
		}
		else
		{
			System.out.println("不存在该值");
		}
	}

}
Map结构的类：
package my;
import java.util.Map;
import java.util.HashMap;
import java.util.Random;
//import java.util.Scanner;
public class Maps
{
	Map<String,Integer> map = new HashMap<String,Integer>();
	 /*private*/public static void AddMap(Map<String, Integer> map, String key)
	 {
//		 设置value值
		 int value=1;
         if (map.containsKey(key))//如果map里面已经存在了这个数字的键
         {
        	 value=map.get(key) + 1;
             map.put(key, value);//那么就修改这个数, 对应的次数增加1
         } 
         else //如果map不存在这个数字的键
         {
             map.put(key, value);//那么添加这个数的键, 对应的次数设置为1
         }
	 }
	 
	 public void DisplayMap(int n)
	 {
		 Random random = new Random();
		 for(int i=0; i<n; i++)
		 {
			 AddMap(map,String.valueOf(random.nextInt(n*1000)));
		 }
//		 大容量时推荐使用
		 for (Map.Entry<String, Integer> entry : map.entrySet()) 
		 {			 
			 System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
		 }	 
	 }
	 
	 public void SearchMap(int n)
	 {
		 Random random = new Random();
		 for(int i=0; i<n; i++)
		 {
			 AddMap(map,String.valueOf(random.nextInt(n)));
		 }
//		 Scanner in = new Scanner(System.in);
		 String key = String.valueOf(n/2);
		 if(map.containsKey(key))
		 {
			 System.out.println("key= " + key + " and value= " + map.get(key));
		 }		
		 
	 }

}
//key:省，map:省会
//自动排序，去掉前面重复的键值对
HashMap结构的类：
package my;
import java.util.HashMap;
import java.util.Random;
import java.util.Iterator;
public class HashMaps
{
	public int n=0;
	public int value=1; 
	HashMap hashmap=new HashMap();
	public void DisplayHashMap(int n)
	{
		Random random=new Random();       
	    for(int i=0;i<n;i++)
	    {    
	         String key=String.valueOf(random.nextInt(n*1000));
	         if(hashmap.containsKey(key))  
	         {
	              value=value+1;   
	         }
	         else   
	         {
	        	 hashmap.put(key, value); 
	         }        	    
	    }    
	    Iterator iterator = hashmap.keySet().iterator();                
        while (iterator.hasNext()) {    
         Object key = iterator.next();    
         System.out.println("key= " + key + " and value= " + hashmap.get(key));    
        }      
	}
	public void SearchHashMap(int n)
	{
		Random random=new Random();       
	    for(int i=0;i<n;i++)
	    {    
	         String key=String.valueOf(random.nextInt(n));
	         if(hashmap.containsKey(key))  
	         {
	              value=value+1;   
	         }
	         else   
	         {
	        	 hashmap.put(key, value); 
	         }        	    
	    }
	    String key = String.valueOf(n/2);
		 if(hashmap.containsKey(key))
		 {
			 System.out.println("key= " + key + " and value= " + hashmap.get(key));
		 }		
	}    
} 
TreeSet结构的类：
package my;
import java.util.TreeSet;
import java.util.Random;
public class TreeSets
{
	public void DisplayTreeSet(int n)
	{
		Random random=new Random();  
		TreeSet treeset = new TreeSet();
		for(int i=0; i<n; i++) 
		{
			String string=String.valueOf(random.nextInt(n*1000));
			treeset.add(string);		
		}
		System.out.println(treeset);	
	}
	public void SearchTreeSet(int n)
	{
		Random random=new Random();  
		TreeSet treeset = new TreeSet();
		for(int i=0; i<n; i++) 
		{
			String string=String.valueOf(random.nextInt(n*1000));
			treeset.add(string);		
		}
		if(treeset.contains("3"))
		{
			System.out.println("存在该值");
		}
		else
		{
			System.out.println("不存在该值");
		}
	}

	

}
//排序，以列表形式[]输出
TreeMap结构的类：
package my;
import java.util.Collection;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.Random;
public class TreeMaps
{	
	public void DisplayTreeMap(int n)
	{
		Random random=new Random();  
		TreeMap treemap = new TreeMap();
		for(int i=0; i<n; i++) 
		{
			String s = ""+(random.nextInt(n));
			treemap.put(s,s);	
		}
		Collection col = treemap.values();
		Iterator it = col.iterator();
		while(it.hasNext()) 
		{
			System.out.println(it.next());
	    }	
	}
	public void SearchTreeMap(int n)
	{

		Random random=new Random();  
		TreeMap treemap = new TreeMap();
		for(int i=0; i<n; i++) 
		{
			String s = ""+(random.nextInt(n));
			treemap.put(s,s);	
		}
		if(treemap.containsValue("123"))
		{
			System.out.println("存在该值");
		}
		else
		{
			System.out.println("不存在该值");
		}
	}
}
//有序不重复
主函数运行：
package my;
public class HelloWorld
{

	public static void main(String[] args)
	{
                               long time1=System.currentTimeMillis();
		//需要计时的代码
		Strings String=new Strings();
		String.DisplayString(1000000);
		String.SearchString(300000);//String.SearchString(300000,"要查找的值");
		
		Lists List=new Lists();
		List.DisplayList(1000000);
		List.SearchList(300000);
	
		Sets Set=new Sets();
		Set.DisplaySet(1000000);
		Set.SearchSet(1000000);
				
		HashSets HashSet=new HashSets();
		HashSet.DisplayHashSet(1000000);
		HashSet.SearchHashSet(1000000);
		
		Maps map=new Maps();
		map.DisplayMap(1000000);
		map.SearchMap(1000000);
				
		HashMaps HashMap=new HashMaps();
		HashMap.DisplayHashMap(1000000);
		HashMap.SearchHashMap(1000000);		
		
		TreeSets TreeSet=new TreeSets();
		TreeSet.DisplayTreeSet(1000000);
		TreeSet.SearchTreeSet(1000000);		
		
		TreeMaps TreeMap=new TreeMaps();
		TreeMap.DisplayTreeMap(1000000);
		TreeMap.SearchTreeMap(1000000);
		
		long time2=System.currentTimeMillis();   
		long interval=(time2-time1);  
		System.out.println("代码运行时间"+interval+"毫秒");
                }
}








